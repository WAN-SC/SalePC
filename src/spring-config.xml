<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">
	<!-- 扫描包 -->
	<context:component-scan base-package="com.gwmh.salepc">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	<!-- 找到oracle配置文件 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list><value>classpath:jdbc.properties</value></list>
		</property>
	</bean>
	<!-- 数据源    连接数据库-->
	<bean id="datasource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	
	<!-- 
	配置对应的数据库框架，知道谁用数据库连接池
	
	配置sqlSessionFactory ，注意mapperLocations的配置，
	这个路径里面存放了MyBatis的Mapper文件
	 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 
			对应我们的实体类所在的包，这个时候会自动取对应包中不包括包名的简单类名作为包括包名的别名。
			多个package之间可以用逗号或者分号等来进行分隔 
		-->
		<property name="typeAliasesPackage" value="com.gwmh.salepc.bean"/>
		<!-- 数据源配置 -->
		<property name="dataSource" ref="datasource" />
		<!-- 查找映射文件 -->
		<property name="mapperLocations">
			<list>
				<value>classpath:com/gwmh/salepc/mapper/*.xml</value>
			</list>
		</property>
		<!-- 配置mybatis的插件，这里使用的是一个分页插件 -->
		<property name="plugins">
			<bean class="com.github.pagehelper.PageHelper">
				<property name="properties">
						<value>dialect = oracle</value>
				</property>
			</bean>
		</property>
	</bean>
	
	<!-- 
	DAO接口所在包名，Spring会自动查找其下的类
	
	使用类：	MapperScannerConfigurer
			MapperFactoryBean : 代替手工使用SqlSessionDaoSupport或SqlSessionTemplate编写数据访问对象(DAO)的代码
	-->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.gwmh.salepc.basedao" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />  
    </bean>
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> 
		<property name="dataSource" ref="datasource"/>
	</bean>

	<tx:advice id="advice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="modify*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="del*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="removce*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="query*" propagation="SUPPORTS"/>
			<tx:method name="select*" propagation="SUPPORTS"/>
			<tx:method name="find*" propagation="SUPPORTS"/>
			<tx:method name="*" read-only="true"/>
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut expression="execution(* com.gwmh.salepc.service.*.*(..))" id="servicePointCut"/>	
		<aop:advisor advice-ref="advice" pointcut-ref="servicePointCut"/>
	</aop:config>
</beans>